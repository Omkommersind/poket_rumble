PLAYER_A_CARD_FIELD_GUID = '219bb8'
PLAYER_A_TEXT_GUID = 'bf5ef9'

PLAYER_B_CARD_FIELD_GUID = 'e603bc'
PLAYER_B_TEXT_GUID = 'f6df8a'

DICE_TAG = 'DICE'
PLAYER_A_TAG = 'PlayerA'
PLAYER_B_TAG = 'PlayerB'

-- Todo: load from file if possible
-- 1 attack1_type
-- 2 attack1_value
-- 3 attack1_type
-- 4 attack1_value
CARDS = {
    ['Charmander'] = {'fire', 30, nil, nil},
    ['Pidgey'] = {'normal', 10, 'flying', 20},
}

Players = {}
PlayerA = {}
PlayerB = {}

function onLoad(save_state)
    PlayerAText = getObjectFromGUID(PLAYER_A_TEXT_GUID)
    PlayerBText = getObjectFromGUID(PLAYER_B_TEXT_GUID)

    PlayerA.tag = PLAYER_A_TAG
    PlayerA.diceVal = -1
    PlayerA.text = PlayerAText
    PlayerA.card = nil

    PlayerB.tag = PLAYER_B_TAG
    PlayerB.diceVal = -1
    PlayerB.text = PlayerBText
    PlayerA.card = nil
end

function onObjectEnterScriptingZone(zone, obj)
    -- Todo: refactor
    if zone.getGUID() == PLAYER_A_CARD_FIELD_GUID then
        objName = obj.getName()
        data = tryGetCardDataByName(objName)
        if data == nil then
            print('Card not recognized: ' .. objName)
            return
        else
            PlayerA.card = data
        end
    end

    if zone.getGUID() == PLAYER_B_CARD_FIELD_GUID then
        objName = obj.getName()
        data = tryGetCardDataByName(objName)
        if data == nil then
            print('Card not recognized: ' .. objName)
            return
        else
            PlayerB.card = data
        end
    end
end

function onObjectRandomize(obj,  player_color)
    if obj.hasTag(DICE_TAG) then
        handleDiceRandomize(obj)
    end
end

function tryGetCardDataByName(name)
    for key, values in pairs(CARDS) do
        if key == name then
            data = {}
            data.attackAType = values[1]
            data.attackAValue = values[2]
            data.attackBType = values[3]
            data.attackBValue = values[4]
            return data
        end
    end
    return nil
end

function handleDiceRandomize(obj)
    Wait.condition(
        function() -- Executed after our condition is met
            if obj.isDestroyed() then
                print("Die was destroyed before it came to rest.")
            else
                value = obj.getRotationValue()

                -- Todo: refactor
                if obj.hasTag(PLAYER_A_TAG) then
                    print('PLAYER A rolled ' .. tostring(value))
                    PlayerA.diceVal = value
                    countBestValueForPlayer(PlayerA, PlayerB)
                end
                if obj.hasTag(PLAYER_B_TAG) then
                    print('PLAYER B rolled ' .. tostring(value))
                    PlayerB.diceVal = value
                    countBestValueForPlayer(PlayerB, PlayerA)
                end
            end
        end,
        function() -- Condition function
            return obj.isDestroyed() or obj.resting
        end
    )
end

function countBestValueForPlayer(player, enemy)
    if player.diceVal == -1 or player.card == nil or enemy.card == nil then
        return
    end

    attackValue = player.card.attackAValue
    result = player.diceVal + attackValue
    print('Attack used: ' .. '(' .. player.card.attackAType .. ')')
    print('...attack final value is ' .. tostring(attackValue))
    print('...die value is ' .. tostring(player.diceVal))
    print('...make final result ' .. tostring(result))
    player.text.setValue(tostring(result))
end
