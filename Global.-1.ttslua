PLAYER_A_CARD_FIELD_GUID = '219bb8'
PLAYER_A_TEXT_GUID = 'bf5ef9'

PLAYER_B_CARD_FIELD_GUID = 'e603bc'
PLAYER_B_TEXT_GUID = 'f6df8a'

DICE_TAG = 'DICE'
PLAYER_A_TAG = 'PlayerA'
PLAYER_B_TAG = 'PlayerB'

-- Cards are defined in another component (zone)
-- 1: pType
-- 1: attackA.name
-- 2: attackA.type
-- 3: attackA.value
-- 4: attackB.name
-- 5: attackB.type
-- 6: attackB.val
CARDS = {
    ['Charmander'] = {'fire', 'Heat Tackle', 'fire', 30, nil, nil, nil},
    ['Bulbasaur'] = {'grass', 'Leech Seed', 'grass', 30, nil, nil, nil},
    ['Squirtle'] = {'water', 'Tackle', 'normal', 10, 'Rain Splash', 'water', 20},
    ['Pidgey'] = {'flying', 'Tackle', 'normal', 10, 'Gust', 'flying', 20},
    ['Caterpie'] = {'bug', 'String Shot', 'bug', 20, nil, nil, nil},
    ['Gastly'] = {'ghost', 'Confuse Ray', 'ghost', 20, nil, nil, nil},
}

DAMAGE = {
    ['normal'] = {
        ['no'] = {'ghost'},
        ['half'] = {'rock', 'steel'},
        ['double'] = {}
    },
    ['fire'] = {
        ['no'] = {},
        ['half'] = {'fire', 'water', 'rock', 'dragon'},
        ['double'] = {'grass', 'ice', 'bug', 'steel'}
    }
}

Players = {}
PlayerA = {}
PlayerB = {}

-- EVENTS
function onLoad(save_state)
    PlayerAText = getObjectFromGUID(PLAYER_A_TEXT_GUID)
    PlayerBText = getObjectFromGUID(PLAYER_B_TEXT_GUID)

    PlayerA.name = 'Red'
    PlayerA.tag = PLAYER_A_TAG
    PlayerA.diceVal = -1
    PlayerA.text = PlayerAText
    PlayerA.card = nil

    PlayerB.name = 'Blue'
    PlayerB.tag = PLAYER_B_TAG
    PlayerB.diceVal = -1
    PlayerB.text = PlayerBText
    PlayerA.card = nil
end

function onObjectEnterScriptingZone(zone, obj)
    if zone.getGUID() == PLAYER_A_CARD_FIELD_GUID then
        player = PlayerA
    elseif zone.getGUID() == PLAYER_B_CARD_FIELD_GUID then
        player = PlayerB
    else
        return
    end

    objName = obj.getName()
    data = tryGetCardDataByName(objName)
    if data == nil then
        print('Card not recognized: ' .. objName)
        return
    else
        player.card = data
    end
end

function onObjectLeaveScriptingZone(zone, obj)
    if zone.getGUID() == PLAYER_A_CARD_FIELD_GUID then
        player = PlayerA
    elseif zone.getGUID() == PLAYER_B_CARD_FIELD_GUID then
        player = PlayerB
    else
        return
    end

    if #zone.getObjects() == 0 then
        player.card = nil
        player.text.setValue('0')
    end
end

function onObjectRandomize(obj,  player_color)
    if obj.hasTag(DICE_TAG) then
        handleDiceRandomize(obj)
    end
end

-- FUNCTIONS
function tryGetDamageMultiplier(attackType, defenceType)
    for key, values in pairs(DAMAGE) do
        if key == attackType then
            for i, value in ipairs(DAMAGE[key]['no']) do
                print(value)
                if value == defenceType then
                    return 0
                end
            end

            for i, value in ipairs(DAMAGE[key]['half']) do
                print(value)
                if value == defenceType then
                    return 0.5
                end
            end

            for i, value in ipairs(DAMAGE[key]['double']) do
                print(value)
                if value == defenceType then
                    return 2
                end
            end

            return 1
        end
    end
    print('attackType ' .. attackType .. ' not found in DAMAGE table')
end

function tryGetCardDataByName(name)
    for key, values in pairs(CARDS) do
        if key == name then
            data = {}
            data.pokemon = key
            data.ptype = values[1]

            data.attackA = {}
            data.attackA.name = values[2]
            data.attackA.type = values[3]
            data.attackA.value = values[4]

            data.attackB = {}
            data.attackB.name = values[5]
            data.attackB.type = values[6]
            data.attackB.value = values[7]
            return data
        end
    end
    return nil
end

function handleDiceRandomize(obj)
    Wait.condition(
        function() -- Executed after our condition is met
            if obj.isDestroyed() then
                print("Die was destroyed before it came to rest.")
            else
                value = obj.getRotationValue()

                if obj.hasTag(PLAYER_A_TAG) then
                    PlayerA.diceVal = value
                    countBestValueForPlayer(PlayerA, PlayerB)
                end
                if obj.hasTag(PLAYER_B_TAG) then
                    PlayerB.diceVal = value
                    countBestValueForPlayer(PlayerB, PlayerA)
                end
            end
        end,
        function() -- Condition function
            return obj.isDestroyed() or obj.resting
        end
    )
end

function countBestValueForPlayer(player, enemy)
    if player.diceVal == -1 or player.card == nil or enemy.card == nil then
        return
    end

    multiplier = tryGetDamageMultiplier(player.card.attackA.type, enemy.card.ptype)
    attackValue = player.card.attackA.value
    print(player.card.pokemon .. ' uses ' .. player.card.attackA.name .. ' (' .. player.card.attackA.type .. ', ' .. tostring(attackValue) .. ')')
    print('...multiplier is x' .. tostring(multiplier))
    print('...die value is ' .. tostring(player.diceVal))

    result = (player.diceVal + attackValue) * multiplier
    print('...final result is ' .. tostring(result))

    if multiplier ~= 1 then
        player.text.setValue(tostring(result) .. ' (x' .. multiplier .. ')')
    else
        player.text.setValue(tostring(result))
    end
end
